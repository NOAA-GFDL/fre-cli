# Test Data Configuration for FRE-CLI
# This file documents the approach for handling test data files in the repository

test_data_approach:
  description: "Configuration for managing test data in FRE-CLI repository"
  
  # Binary files policy
  binary_files:
    policy: "DO NOT COMMIT"
    rationale: "Binary files like NetCDF should not be committed to git repositories"
    exceptions: "Small essential binary files may be allowed with explicit approval"
    
  # NetCDF test data approach
  netcdf_files:
    source_format: "CDL (Common Data Language)"
    generation_method: "Dynamic generation using ncgen3 during test execution"
    storage_location: "**/test_data/"
    gitignore_pattern: "**/test_data/*.nc"
    
    # Example workflow for NetCDF test data
    workflow:
      1: "Store CDL files (.cdl) in version control"
      2: "Generate NetCDF files (.nc) dynamically in test setup using ncgen3"
      3: "Clean up generated files in test teardown"
      4: "Ensure .gitignore excludes generated .nc files"

  # Example test data files
  examples:
    atmospheric_data:
      cdl_file: "fre/app/generate_time_averages/tests/test_data/atmos.197901-198312.LWP.cdl"
      generated_nc: "fre/app/generate_time_averages/tests/test_data/atmos.197901-198312.LWP.nc"
      generation_command: "ncgen3 -k netCDF-4 -o output.nc input.cdl"
      
    ocean_data:
      cdl_files:
        - "ocean_1x1.000101-000212.tos.cdl"
        - "ocean_1x1.000301-000412.tos.cdl"
      
    processed_data:
      cdl_file: "frenctools_timavg_atmos.197901-198312.LWP.cdl"

# Test execution guidelines
test_execution:
  setup:
    - "Generate required NetCDF files from CDL using ncgen3"
    - "Verify CDL source files exist before generation"
    - "Clean up any existing NetCDF files before regeneration"
    
  cleanup:
    - "Remove generated NetCDF files after tests complete"
    - "Use test_zzz_cleanup() functions to ensure cleanup runs last alphabetically"
    - "Cleanup functions should be named to run after all other tests"

# Model configuration for testing
model_testing:
  test_ordering:
    discovery: "pytest discovers tests alphabetically"
    cleanup_pattern: "test_zzz_cleanup()"
    rationale: "Ensures cleanup functions run last in alphabetical order"
    
  test_function_naming:
    cleanup_functions: "test_zzz_cleanup()"
    regular_tests: "test_[descriptive_name]()"
    preamble_tests: "Functions that must run first should start with test_a_ or similar"

# Dependencies
dependencies:
  required_tools:
    - "ncgen3: For generating NetCDF files from CDL"
    - "pytest: For test execution and discovery"
  
  python_version: "3.11.*"
  test_framework: "pytest"